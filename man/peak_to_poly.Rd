% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polynomial.R
\name{peak_to_poly}
\alias{peak_to_poly}
\title{Convert Time Series to Polynomial}
\usage{
peak_to_poly(df, coeff, path.data = NULL)
}
\arguments{
\item{df}{The resulting tibble of the function \code{avg_peaks()}. See \code{?avg_peaks} for more details.}

\item{coeff}{A numerical value indicating the number of coefficients the model used to fit on the time series data should have.}

\item{path.data}{A string character defining where to save the results. If \code{NULL} (default),
data is not stored in a file.}
}
\value{
A list with the length equal to the number of unique species within \code{df} containing the fitted models.
}
\description{
Convert Time Series to Polynomial
}
\examples{
# This example contains a self-sufficient data PREPARATION section
# before the function is actually run.
require(dplyr)

# PREPARATION ####
# create a classifier to store specimen info (see package vignette for details)
species <- paste0("species_", LETTERS[1:17])
classifier <- tibble(species = species,
                     specimen = paste0("speciemen_", letters[1:17]),
                     measurement = paste0("m_", 1:length(species)),
                     amp = rep(2,length(species)),
                     lever.ratio = rep(0.5, length(species)))

# create temporary tibble to store data for bite series simulation
classifier.temp <- classifier \%>\%
  mutate(type = c(rep("sin", 1), rep("plat", length(species)-1)),
         max.y = rep(5, length(species)),
         length.of.bite = c(rep(20, 1), rep(70, length(species)-1)),
         length.of.series = c(rep(200, 1), rep(850, length(species)-1)),
         jit = c(rep(0.5, 1), rep(2, length(species)-1)),
         slope.perc.starts = c(0, 10, 20, 30, 40, 50, 10, 10, 10, 20, 30, 40, 50, 60, 70, 80, 90),
         slope.perc.ends =   c(0, 10, 20, 30, 40, 50, 90, 80, 70, 60, 50, 40, 30, 20, 10, 10, 10))


# create tibble with simulated time series with different
# bite characteristics for each measurement, specimen and species
df.all <- NULL
for(i in 1:nrow(classifier.temp)){
  df.curr <- simulate_bites(no.of.bites = 5,
                            length.of.bite = classifier.temp$length.of.bite[i],
                            length.of.series = classifier.temp$length.of.series[i],
                            max.y = classifier.temp$max.y[i],
                            max.y.jit = 15,
                            jit = classifier.temp$jit[i],
                            bite.type = classifier.temp$type[i],
                            slope.perc.start = classifier.temp$slope.perc.starts[i],
                            slope.perc.end = classifier.temp$slope.perc.ends[i],
                            plot = TRUE)

  # add measurement number to df.curr
  df.curr <- df.curr \%>\%
    mutate(measurement = classifier.temp$measurement[i])

  # add current sumulated bite series to df.all
  df.all <- rbind(df.all, df.curr)
}
# remove temporary tibble to avoid confusion
rm(classifier.temp)

# rename columns
df.all <- df.all \%>\%
  rename(force = y)

# add classifier info to bite table (df.all)
df.all <- left_join(df.all,
                    classifier,
                    by = "measurement")

peaks.df <- find_strongest_peaks(df = df.all,
                                 no.of.peaks = 5,
                                 print.to.pdf = FALSE)

# rescale bites
peaks.df.norm <- rescale_peaks(df.peaks = peaks.df,
                                df.data = df.all)

# reduce to 100 observations per bite
peaks.df.norm.100 <- red_peaks_100(df = peaks.df.norm,
                                   path.plots = path.plots,
                                   print.to.pdf = FALSE)

# average curves per species
peaks.df.100.avg <- avg_peaks(df = peaks.df.norm.100)

# find best polynomial degree to describe curves
best.fit.poly <- find_best_fits(df = peaks.df.100.avg,
                                print.to.pdf = FALSE)

# RUN THE FUNCTION ####
# convert curces to polynonial models
models <- peak_to_poly(peaks.df.100.avg,
                        best.fit.poly)
}
