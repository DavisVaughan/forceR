% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalization.R
\name{rescale_peaks}
\alias{rescale_peaks}
\title{Rescale Peaks}
\usage{
rescale_peaks(df.peaks, df.data, path.data = NULL)
}
\arguments{
\item{df.peaks}{The resulting tibble of the function \code{find_strongest_peaks()}. See \code{?find_strongest_peaks} for more details.}

\item{df.data}{A data frame or tibble in the below format. The columns \code{t} (time), \code{force} and \code{measurement}
(measurement ID) must be present. This will usually be the same table that was used before in \code{find_strongest_peaks()}.}

\item{path.data}{A string character defining where to save the results. If \code{NULL} (default),
data is not stored in file.}
}
\value{
This function returns a tibble with the same format as \code{df}, but with the additional columns \code{t.norm} and \code{force.norm} which will contain the
rescaled time and force data now both ranging from 0 to 1.
}
\description{
Rescales time series in x and y to values ranging from 0 to 1.
}
\section{\code{df} needs to contain the following columns:}{
\tabular{ccc}{
   \strong{\code{t}} \tab \strong{\code{force}} \tab \strong{\code{measurement}} \cr
   \code{t.1} \tab \code{force.1} \tab \code{measurement.1} \cr
   \code{...} \tab \code{...} \tab \code{...} \cr
   \code{t.n} \tab \code{force.n} \tab \code{measurement.m} \cr
}
}

\examples{
# This example contains a self-sufficient data PREPARATION section
# before the function is actually run.
require(dplyr)

# PREPARATION ####
# create a classifier to store specimen info (see package vignette for details)
classifier <- tibble(species = c("A","A","A","A","B","B","B","B"),
                     specimen = c("a","a","b","b","c","c","d","d"),
                     measurement = paste0("m_0", 1:8),
                     amp = c(rep(2,4), rep(0.5, 4)),
                     lever.ratio = rep(0.5, 8))

# create temporary tibble to store data for bite series simulation
classifier.temp <- classifier \%>\%
  mutate(type = c(rep("sin", 4), rep("plat", 4)),
         max.y = c(1.9, 2.4, 2.2, 2.0, 6.8, 7.2, 7.5, 7.2),
         length.of.bite = c(20, 20, 18, 22, 50, 40, 45, 40),
         length.of.series = c(rep(200, 4), rep(600, 4)),
         jit = c(rep(0.5, 4), rep(1, 4)))

# create tibble with simulated time series with different
# bite characteristics for each measurement, specimen and species
df.all <- NULL
for(i in 1:nrow(classifier.temp)){
  df.curr <- simulate_bites(no.of.bites = 7,
                            length.of.bite = classifier.temp$length.of.bite[i],
                            length.of.series = classifier.temp$length.of.series[i],
                            max.y = classifier.temp$max.y[i],
                            max.y.jit = 15,
                            jit = classifier.temp$jit[i],
                            bite.type = classifier.temp$type[i],
                            plot = FALSE)

  # add measurement number to df.curr
  df.curr <- df.curr \%>\%
    mutate(measurement = classifier.temp$measurement[i])

  # add current sumulated bite series to df.all
  df.all <- rbind(df.all, df.curr)
}
# remove temporary tibble to avoid confusion
rm(classifier.temp)

# rename columns
df.all <- df.all \%>\%
  rename(force = y)

# add classifier info to bite table (df.all)
df.all <- left_join(df.all,
                    classifier,
                    by = "measurement")

peaks.df <- find_strongest_peaks(df = df.all,
                                 no.of.peaks = 5,
                                 print.to.pdf = FALSE)

# RUN THE FUNCTION ####
# rescale bites
peaks.df.norm <- rescale_peaks(df.peaks = peaks.df,
                                 df.data = df.all)

# maximum values of time and force are both 1 in the whole data frame:
max(peaks.df.norm$t.norm)
max(peaks.df.norm$force.norm)

}
