% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/peak_finding.R
\name{find_strongest_peaks}
\alias{find_strongest_peaks}
\title{Find Peaks}
\usage{
find_strongest_peaks(
  df,
  no.of.peaks = 5,
  initial.threshold = 0.05,
  slope.length.start = 5,
  slope.length.end = 5,
  slope.thresh.start = 0.02,
  slope.thresh.end = 0.02,
  path.data = NULL,
  path.plots = getwd(),
  print.to.pdf = TRUE
)
}
\arguments{
\item{df}{A data frame or tibble in the below format. The columns \code{t} (= time), \code{force} and \code{measurement}
(= measurement ID) must be present.}

\item{no.of.peaks}{A numeric value defining how many peaks per \code{species} (not per \code{measurement}") should be identified. The function will always return
the strongest peaks. Default: \code{5}}

\item{initial.threshold}{A numeric value defining the threshold (in \% of the maximum force of the measurement)
that is used during the first iteration. Default: \code{0.05}}

\item{slope.length.start}{A numeric value defining the window size (in time steps) of
slope calculation for peak starts during the second iteration. Default: \code{5}}

\item{slope.length.end}{A numeric value defining the window size (in time steps) of
slope calculation for peak ends during the second iteration. Default: \code{5}}

\item{slope.thresh.start}{A numeric value defining the threshold at which to stop the sliding window and save the
current time point as the actual start of the current peak. Default: \code{0.04}}

\item{slope.thresh.end}{A numeric value defining the threshold at which to stop the sliding window and save the
current time point as the actual end of the current peak. Default: \code{0.04}}

\item{path.data}{A string character defining where to save the results. If \code{NULL} (default),
data is not stored in a file.}

\item{path.plots}{A string character defining where to save the plots.}

\item{print.to.pdf}{A logical value indicating if the results of the initial peak finding should be saved as PDFs.
Default: \code{TRUE}}
}
\value{
Creates a tibble in the following format and saves it as a CSV-file:
The column \strong{\code{species}} contains one species per row\cr (\verb{species.1 ... species.n}).

The column \strong{\code{measurements}} contains as many measurements as \code{no.of.peaks}, separated by '\verb{;}':\cr (\verb{measurement.1; ...; measurements.no.of.peaks}).

The column \strong{\code{starts}} contains as many peak starts as \code{no.of.peaks}, separated by '\verb{;}':\cr (\verb{start.1; ...; start.no.of.peaks}).

The column \strong{\code{ends}} contains as many peak ends as \code{no.of.peaks}, separated by '\verb{;}':\cr (\verb{end.1; ...; end.no.of.peaks}).

In addition, if \code{print.to.pdf == TURE}, a graph indicating the \code{initial.threshold} as a green line, the peak starts as blue points, and the peak ends
as orange points is saved as one PDF per measurement at \code{path.plots}.
}
\description{
Identifies peaks in a first iteration and optimizes the starts and ends of the strongest peaks per species in a second iteration.
}
\details{
The input data frame or tibble needs to contain the following columns:\tabular{ccc}{
   \strong{\code{t}} \tab \strong{\code{force}} \tab \strong{\code{measurement}} \cr
   \code{t.1} \tab \code{force.1} \tab \code{measurement.1} \cr
   \code{...} \tab \code{...} \tab \code{...} \cr
   \code{t.n} \tab \code{force.n} \tab \code{measurement.m} \cr
}
}
\examples{
require(dplyr)

# PREPARATION ####
# create a classifier to store specimen info (see package vignette for details)
classifier <- tibble(species = c("A","A","A","A","B","B","B","B"),
                     specimen = c("a","a","b","b","c","c","d","d"),
                     measurement = paste0("m_0", 1:8),
                     amp = c(rep(2,4), rep(0.5, 4)),
                     lever.ratio = rep(0.5, 8))

# create temporary tibble to store data for bite series simulation
classifier.temp <- classifier \%>\%
  mutate(no.of.bites = rep(6, 8),
  type = c(rep("sin", 4), rep("plat", 4)),
         max.y = c(1.9, 2.4, 2.2, 2.0, 6.8, 7.2, 7.5, 7.2),
         length.of.bite = c(20, 20, 18, 22, 50, 40, 45, 40),
         length.of.series = c(rep(200, 4), rep(600, 4)),
         jit = c(rep(0.5, 4), rep(1, 4)))

# create tibble with eight simulated time series with different
# bite charactersitics for each measurement, specimen and species
df.all <- NULL
for(i in 1:nrow(classifier.temp)){
  df.curr <- simulate_bites(no.of.bites = 7,
                            length.of.bite = classifier.temp$length.of.bite[i],
                            length.of.series = classifier.temp$length.of.series[i],
                            max.y = classifier.temp$max.y[i],
                            max.y.jit = 15,
                            jit = classifier.temp$jit[i],
                            bite.type = classifier.temp$type[i],
                            plot = FALSE)

  # add measurement number to df.curr
  df.curr <- df.curr \%>\%
    mutate(measurement = classifier.temp$measurement[i])

  # add current sumulated bite series to df.all
  df.all <- rbind(df.all, df.curr)
}
# remove temporary tibble to avoid confusion
rm(classifier.temp)

# rename columns
df.all <- df.all \%>\%
  rename(force = y)

# add classifier info to bite table (df.all)
df.all <- left_join(df.all,
                    classifier,
                    by = "measurement")

# RUNNING THE FUNCTION ####
peaks.df <- find_strongest_peaks(df = df.all,
                                 no.of.peaks = 5,
                                 print.to.pdf = FALSE)

# PLOT RESULTS ####
plot_peaks(df.peaks = peaks.df,
           df.data = df.all,
           additional.msecs = 20,
           print.to.pdf = FALSE)
}
